{"version":3,"sources":["common/constants.ts","common/tools.ts","utils.ts","events.ts","index.ts"],"names":[],"mappings":"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","file":"src.8dc05ecd.js","sourceRoot":"../src","sourcesContent":["export const RGB_ALIVE = 0xffffc0c1;\nexport const RGB_DEAD = 0xffa50a00;\nexport const BIT_ROT = 10;\n\nexport const WASM_FILENAME = 'esential-repo/life.wasm';\nexport const WIDTH = 500;\nexport const HEIGHT = 500;\n","export const asPages = (bytes: number) => {\n  return ((bytes + 0xffff) & ~0xffff) >>> 16;\n};\n\nexport const calcNumPages = (width: number, height: number) => {\n  const size = width * height;\n  const bytes = (size + size) * 4; // 4b per cell\n  return asPages(bytes) || 1;\n};\n","import { EventTuple } from './types';\n\nexport const rgb2bgr = (rgb: number) => {\n  return ((rgb >>> 16) & 0xff) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n};\n\nexport const addListeners = (array: EventTuple[], handler: (evt: Event) => void) => {\n  for (const [element, eventName] of array) {\n    element.addEventListener(eventName, handler);\n  }\n};\n","import { HEIGHT, RGB_ALIVE, RGB_DEAD, BIT_ROT, WASM_FILENAME, WIDTH } from './common/constants';\nimport { calcNumPages } from './common/tools';\nimport { Exported } from './types';\nimport { addListeners } from './utils';\n\nexport const addAllListeners = (canvas: HTMLCanvasElement, document: Document, exported: Exported) => {\n  // When clicked or dragged, fill the current row and column with random live cells\n  let down = false;\n  addListeners(\n    [\n      [canvas, 'mousedown'],\n      [canvas, 'touchstart'],\n    ],\n    () => (down = true),\n  );\n  addListeners(\n    [\n      [document, 'mouseup'],\n      [document, 'touchend'],\n    ],\n    () => (down = false),\n  );\n  addListeners(\n    [\n      [canvas, 'mousemove'],\n      [canvas, 'touchmove'],\n      [canvas, 'mousedown'],\n    ],\n    (e: any) => {\n      if (!down) return;\n      let loc: { clientX: number; clientY: number };\n      if (e.touches) {\n        if (e.touches.length > 1) return;\n        loc = e.touches[0];\n      } else {\n        loc = e as MouseEvent;\n      }\n      const bcr = canvas.getBoundingClientRect();\n      exported.fill((loc.clientX - bcr.left) >>> 1, (loc.clientY - bcr.top) >>> 1, 0.5);\n    },\n  );\n};\n","import { HEIGHT, WASM_FILENAME, WIDTH } from './common/constants';\nimport { calcNumPages } from './common/tools';\nimport { addAllListeners } from './events';\nimport { Exported } from './types';\n\nconst run = async (canvas: HTMLCanvasElement) => {\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n  context.imageSmoothingEnabled = false;\n\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n\n  const pages = calcNumPages(WIDTH, HEIGHT);\n  const boardSize = WIDTH * HEIGHT;\n  const memory = new WebAssembly.Memory({\n    initial: pages,\n    maximum: pages,\n  });\n  try {\n    const response = await fetch(WASM_FILENAME);\n    const buffer = await response.arrayBuffer();\n    const module = await WebAssembly.instantiate(buffer, {\n      env: {\n        memory,\n        abort: function() {\n          return;\n        },\n        log: (number: number) => {\n          let hex = number;\n          if (hex < 0) hex = 0xffffffff + hex + 1;\n          console.log(hex.toString(16), `(${number})`);\n          return;\n        },\n        rnd: () => {\n          return Math.random() < 0.1;\n        },\n      },\n    });\n\n    const exported = module.instance.exports as Exported;\n\n    const sanity = exported.init(WIDTH, HEIGHT);\n    console.log('wasm loaded', sanity.toString(10));\n\n    const mem = new Uint32Array(memory.buffer);\n\n    (function update() {\n      setTimeout(update, 1000 / 60);\n      mem.copyWithin(0, boardSize, boardSize + boardSize);\n      exported.step();\n    })();\n\n    const imageData = context.createImageData(WIDTH, HEIGHT);\n    const pixels = new Uint32Array(imageData.data.buffer);\n\n    (function render() {\n      requestAnimationFrame(render);\n      pixels.set(mem.subarray(boardSize, 2 * boardSize)); // copy output to image buffer\n      context.putImageData(imageData, 0, 0); // apply image buffer\n    })();\n\n    addAllListeners(canvas, document, exported);\n  } catch (err) {\n    alert('Failed to load WASM: ' + err.message + ' (ad blocker, maybe?)');\n    console.log(err.stack);\n  }\n};\n\nrun(document.getElementsByTagName('canvas')[0]);\n"]}